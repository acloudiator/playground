$script = <<SCRIPT
mkdir $HOME/kernel-4.15
cd $HOME/kernel-4.15
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.15/linux-headers-4.15.0-041500_4.15.0-041500.201802011154_all.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.15/linux-headers-4.15.0-041500-generic_4.15.0-041500.201802011154_amd64.deb
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.15/linux-image-4.15.0-041500-generic_4.15.0-041500.201802011154_amd64.deb
sudo dpkg -i *.deb
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
sudo apt-get update && sudo apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')
sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
SCRIPT

#kubeadm token generate
#kubeadm token create <generated-token> --print-join-command --ttl=0

Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: $script

  config.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

  config.vm.define "master" do |master|
    master.vm.box = "ubuntu/xenial64"
    master.vm.hostname = "master.local"
    master.vm.network :private_network, ip: "10.10.10.10"
    master.vm.provision :shell, inline: "reboot"
  end

  config.vm.define "worker1" do |worker1|
    worker1.vm.box = "ubuntu/xenial64"
    worker1.vm.hostname = "worker1.local"
    worker1.vm.network :private_network, ip: "10.10.10.11"
    worker1.vm.provision :shell, inline: "reboot"
  end

  config.vm.define "worker2" do |worker2|
    worker2.vm.box = "ubuntu/xenial64"
    worker2.vm.hostname = "worker2.local"
    worker2.vm.network :private_network, ip: "10.10.10.12"
    worker2.vm.provision :shell, inline: "reboot"
  end

end
